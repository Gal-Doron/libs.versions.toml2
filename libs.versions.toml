[versions]
bouncyCastleCrypto = "1.70"
dockerComposeRule = "1.8.0"
# hibernate-core is org.springframework.boot:spring-boot-starter-data-jpa dependency,
# we should not update it to 6.x.x before spring-boot
hibernate = "5.6.10.Final"
junit4 = "4.13.2"
junit5 = "5.9.0"
# projects use Groovy to configure logback, version 1.2.7 is the latest with Groovy support
logback = { strictly = "1.2.7" }
oracleDb = { strictly = "19.14.0.0" }
springBoot = "2.7.2"
springSecurityKerberos = "1.0.1.RELEASE"


[libraries]
platform-oracleDb = { module = "com.oracle.database.jdbc:ojdbc-bom", version.ref = "oracleDb" }
platform-springBoot = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBoot" }


aspectjweaver = { module = "org.aspectj:aspectjweaver", version = "1.9.9.1" }

bcpgJdk15on = { module = "org.bouncycastle:bcpg-jdk15on", version.ref = "bouncyCastleCrypto" }
bcprovJdk15on = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncyCastleCrypto" }
constraints-bcprovExtJdk15on = { module = "org.bouncycastle:bcprov-ext-jdk15on", version.ref = "bouncyCastleCrypto" }
constraints-bcpkixJdk15on = { module = "org.bouncycastle:bcpkix-jdk15on", version.ref = "bouncyCastleCrypto" }
bouncyGpg = { module = "name.neuhalfen.projects.crypto.bouncycastle.openpgp:bouncy-gpg", version = "2.3.0" }

constraints-commonsCodec = { module = "commons-codec:commons-codec", version = "1.15" }
commonsDbcp2 = { module = "org.apache.commons:commons-dbcp2" }
commonsIo = { module = "commons-io:commons-io", version = "2.11.0" }

esapi = { module = "org.owasp.esapi:esapi", version = "2.4.0.0" }

guava = { module = "com.google.guava:guava", version = "31.1-jre" }


hibernateCore = { module = "org.hibernate:hibernate-core", version.ref = "hibernate" }
constraints-hibernateEnvers = { module = "org.hibernate:hibernate-envers", version.ref = "hibernate" }
constraints-jbossTransactionApi = { module = "org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec", version = "1.1.1.Final" }


httpclient = { module = "commons-httpclient:commons-httpclient", version = { strictly = "3.1-jenkins-1" } }

slf4jApi = { module = "org.slf4j:slf4j-api" }
jclOverSlf4j = { module = "org.slf4j:jcl-over-slf4j" }
constraints-log4jOverSlf4j = { module = "org.slf4j:log4j-over-slf4j" }
constraints-julToSlf4j = { module = "org.slf4j:jul-to-slf4j" }

jcommander = { module = "com.beust:jcommander", version = "1.82" }

shiroCryptoHash = { module = "org.apache.shiro:shiro-crypto-hash", version = "1.9.1" }

logbackCore = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logbackClassic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

logbackExtSpring = { module = "org.logback-extensions:logback-ext-spring", version = "0.1.5" }

lombok = { module = "org.projectlombok:lombok" }

univocityParsers = { module = "com.univocity:univocity-parsers", version = "2.9.1" }

micrometerCore = { module = "io.micrometer:micrometer-core" }
micrometerPrometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
micrometerEelastic = { module = "io.micrometer:micrometer-registry-elastic" }

nimbusdsOauth2Sdk = { module = "com.nimbusds:oauth2-oidc-sdk", version = "9.40" }


opensaml = { module = "org.opensaml:opensaml", version = "2.6.6" }
openws = { module = "org.opensaml:openws", version = "1.5.6" }

springBoot = { module = "org.springframework.boot:spring-boot", version.ref = "springBoot" }
springBootAutoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "springBoot" }
springBootActuator = { module = "org.springframework.boot:spring-boot-actuator", version.ref = "springBoot" }
springBootActuatorAutoconfigure = { module = "org.springframework.boot:spring-boot-actuator-autoconfigure", version.ref = "springBoot" }
springBootStarterDataJpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "springBoot" }
springBootStarterDataRest = { module = "org.springframework.boot:spring-boot-starter-data-rest", version.ref = "springBoot" }
springBootStarterSecurity = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "springBoot" }
springBootStarterBatch = { module = "org.springframework.boot:spring-boot-starter-batch", version.ref = "springBoot" }
springBootStarterCache = { module = "org.springframework.boot:spring-boot-starter-cache", version.ref = "springBoot" }
springBootStarterJDBC = { module = "org.springframework.boot:spring-boot-starter-jdbc", version.ref = "springBoot" }
springBootStarterActuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "springBoot" }
springBootStarterValidation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "springBoot" }
springBootStarterWebflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "springBoot" }
springBootStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "springBoot" }
springBootConfigurationProcessor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "springBoot" }


springDataCommons = { module = "org.springframework.data:spring-data-commons" }
springDataJpa = { module = "org.springframework.data:spring-data-jpa" }

springDataRestCore = { module = "org.springframework.data:spring-data-rest-core" }
springDataRestWebmvc = { module = "org.springframework.data:spring-data-rest-webmvc" }

springSecurityConfig = { module = "org.springframework.security:spring-security-config" }
springSecurityCore = { module = "org.springframework.security:spring-security-core" }
springSecurityCrypto = { module = "org.springframework.security:spring-security-crypto" }
springSecurityOauthResourceServer = { module = "org.springframework.security:spring-security-oauth2-resource-server" }
springSecurityOauth2Jose = { module = "org.springframework.security:spring-security-oauth2-jose" }
springSecurityWeb = { module = "org.springframework.security:spring-security-web" }
springSecuritySaml2Core = { module = "org.springframework.security.extensions:spring-security-saml2-core", version = "1.0.10.RELEASE" }

springSecurityKerberosCore = { module = "org.springframework.security.kerberos:spring-security-kerberos-core", version.ref = "springSecurityKerberos" }
springSecurityKerberosWeb = { module = "org.springframework.security.kerberos:spring-security-kerberos-web", version.ref = "springSecurityKerberos" }

springSessionCore = { module = "org.springframework.session:spring-session-core" }

springBatchCore = { module = "org.springframework.batch:spring-batch-core" }
springBatchInfrastructure = { module = "org.springframework.batch:spring-batch-infrastructure" }

springBeans = { module = "org.springframework:spring-beans" }
springContext = { module = "org.springframework:spring-context" }
springCore = { module = "org.springframework:spring-core" }
springJcl = { module = "org.springframework:spring-jcl" }
springJdbc = { module = "org.springframework:spring-jdbc" }
springTx = { module = "org.springframework:spring-tx" }
springWeb = { module = "org.springframework:spring-web" }
springWebmvc = { module = "org.springframework:spring-webmvc" }
springWebflux = { module = "org.springframework:spring-webflux" }

tomcatEmbedCore = { module = "org.apache.tomcat.embed:tomcat-embed-core" }
tomcatAnnotationsApi = { module = "org.apache.tomcat:tomcat-annotations-api" }

javaxServletApi = { module = "javax.servlet:javax.servlet-api" }
javaxPersistenceApi = { module = "javax.persistence:javax.persistence-api" }

findbugsJsr305 = { module = "com.google.code.findbugs:jsr305", version = "3.0.2" }

jakartaPersistenceApi = { module = "jakarta.persistence:jakarta.persistence-api" }
jakartaAnnotationApi = { module = "jakarta.annotation:jakarta.annotation-api" }
micronautDataModel = { module = "io.micronaut.data:micronaut-data-model", version = "3.10.0" }

jacksonAnnotations = { module = "com.fasterxml.jackson.core:jackson-annotations" }
jacksonCore = { module = "com.fasterxml.jackson.core:jackson-core" }
jacksonDatabind = { module = "com.fasterxml.jackson.core:jackson-databind" }
jacksonDatatypeJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }

jacksonModelVersioning = { module = "com.github.jonpeterson:jackson-module-model-versioning", version = "1.2.2" }

jasypt = { module = "org.jasypt:jasypt", version = "1.9.3" }
jasyptSpringBoot = { module = "com.github.ulisesbocchio:jasypt-spring-boot", version = "3.0.4" }

reflectionUtil = { module = "de.cronn:reflection-util", version = "2.14.0" }

reactorCore = { module = "io.projectreactor:reactor-core" }

velocityEngineCore = { module = "org.apache.velocity:velocity-engine-core", version = "2.3" }

xmltooling = { module = "org.opensaml:xmltooling", version = "1.4.6" }
# xml-apis:1.4.01 is younger than xml-apis:2.x.x
xmlApis = { module = "xml-apis:xml-apis", version = "1.4.01" }

ojdbc = { module = "com.oracle.database.jdbc:ojdbc8", version.ref = "oracleDb" }
oraNls = { module = "com.oracle.database.nls:orai18n", version.ref = "oracleDb" }
constraints-oraclepki = { module = "com.oracle.database.security:oraclepki", version.ref = "oracleDb" }
constraints-osdtCore = { module = "com.oracle.database.security:osdt_core", version.ref = "oracleDb" }
constraints-osdtCert = { module = "com.oracle.database.security:osdt_cert", version.ref = "oracleDb" }

constraints-xmlsec = { module = "org.apache.santuario:xmlsec", version = "2.3.1" }

# test libs
test-dockerComposeRuleCore = { module = "com.palantir.docker.compose:docker-compose-rule-core", version.ref = "dockerComposeRule" }
test-dockerComposeRuleJunit4 = { module = "com.palantir.docker.compose:docker-compose-rule-junit4", version.ref = "dockerComposeRule" }

test-springTest = { module = "org.springframework:spring-test" }

test-jodaTime = { module = "joda-time:joda-time", version = "2.10.14" }

test-junit4 = { module = "junit:junit", version.ref = "junit4" }
test-junit5 = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit5" }

test-hamcrest = { module = "org.hamcrest:hamcrest" }
test-hamcrestCore = { module = "org.hamcrest:hamcrest-core" }
test-mokitoCore = { module = "org.mockito:mockito-core", version = "4.6.1" }
test-springBootStarterTest = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springBoot" }




[bundles]
test-dockerComposeRule = ["test-dockerComposeRuleCore", "test-dockerComposeRuleJunit4"]
constraints-oracleDb = ["ojdbc", "oraNls", "constraints-oraclepki", "constraints-osdtCore", "constraints-osdtCert"]

[plugins]
benManesVersions = { id = "com.github.ben-manes.versions", version = "0.42.0" }
commonVersioning = { id = 'com.aptitudesoftware.common-versioning', version = '0.1.14'}
dependencyAnalysis = { id = "com.autonomousapps.dependency-analysis", version = "1.12.0" }
grgit = { id = "org.ajoberstar.grgit", version = "5.0.0" }
menda = { id = "com.aptitudesoftware.whitesource", version = "1.0.42" }
shadow = { id = "com.github.johnrengelman.shadow", version = "7.1.2" }
sonar = { id = "org.sonarqube", version = "3.4.0.2513" }
